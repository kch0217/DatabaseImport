/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.OauthProviderConsumerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthProviderConsumer extends TableImpl<OauthProviderConsumerRecord> {

    private static final long serialVersionUID = -1677741574;

    /**
     * The reference instance of <code>bitnami_edx.oauth_provider_consumer</code>
     */
    public static final OauthProviderConsumer OAUTH_PROVIDER_CONSUMER = new OauthProviderConsumer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthProviderConsumerRecord> getRecordType() {
        return OauthProviderConsumerRecord.class;
    }

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.id</code>.
     */
    public final TableField<OauthProviderConsumerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.name</code>.
     */
    public final TableField<OauthProviderConsumerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.description</code>.
     */
    public final TableField<OauthProviderConsumerRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.key</code>.
     */
    public final TableField<OauthProviderConsumerRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.secret</code>.
     */
    public final TableField<OauthProviderConsumerRecord, String> SECRET = createField("secret", org.jooq.impl.SQLDataType.VARCHAR.length(16).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.status</code>.
     */
    public final TableField<OauthProviderConsumerRecord, Short> STATUS = createField("status", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.xauth_allowed</code>.
     */
    public final TableField<OauthProviderConsumerRecord, Byte> XAUTH_ALLOWED = createField("xauth_allowed", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_consumer.user_id</code>.
     */
    public final TableField<OauthProviderConsumerRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>bitnami_edx.oauth_provider_consumer</code> table reference
     */
    public OauthProviderConsumer() {
        this("oauth_provider_consumer", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.oauth_provider_consumer</code> table reference
     */
    public OauthProviderConsumer(String alias) {
        this(alias, OAUTH_PROVIDER_CONSUMER);
    }

    private OauthProviderConsumer(String alias, Table<OauthProviderConsumerRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthProviderConsumer(String alias, Table<OauthProviderConsumerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OauthProviderConsumerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OAUTH_PROVIDER_CONSUMER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthProviderConsumerRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_PROVIDER_CONSUMER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthProviderConsumerRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthProviderConsumerRecord>>asList(Keys.KEY_OAUTH_PROVIDER_CONSUMER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OauthProviderConsumerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OauthProviderConsumerRecord, ?>>asList(Keys.OAUTH_PROVIDER_CONSUMER_USER_ID_4F22B60D2B258006_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderConsumer as(String alias) {
        return new OauthProviderConsumer(alias, this);
    }

    /**
     * Rename this table
     */
    public OauthProviderConsumer rename(String name) {
        return new OauthProviderConsumer(name, null);
    }
}

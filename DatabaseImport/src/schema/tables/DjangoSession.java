/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.DjangoSessionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DjangoSession extends TableImpl<DjangoSessionRecord> {

    private static final long serialVersionUID = -1289354463;

    /**
     * The reference instance of <code>bitnami_edx.django_session</code>
     */
    public static final DjangoSession DJANGO_SESSION = new DjangoSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DjangoSessionRecord> getRecordType() {
        return DjangoSessionRecord.class;
    }

    /**
     * The column <code>bitnami_edx.django_session.session_key</code>.
     */
    public final TableField<DjangoSessionRecord, String> SESSION_KEY = createField("session_key", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_session.session_data</code>.
     */
    public final TableField<DjangoSessionRecord, String> SESSION_DATA = createField("session_data", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_session.expire_date</code>.
     */
    public final TableField<DjangoSessionRecord, Timestamp> EXPIRE_DATE = createField("expire_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.django_session</code> table reference
     */
    public DjangoSession() {
        this("django_session", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.django_session</code> table reference
     */
    public DjangoSession(String alias) {
        this(alias, DJANGO_SESSION);
    }

    private DjangoSession(String alias, Table<DjangoSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DjangoSession(String alias, Table<DjangoSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DjangoSessionRecord> getPrimaryKey() {
        return Keys.KEY_DJANGO_SESSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DjangoSessionRecord>> getKeys() {
        return Arrays.<UniqueKey<DjangoSessionRecord>>asList(Keys.KEY_DJANGO_SESSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoSession as(String alias) {
        return new DjangoSession(alias, this);
    }

    /**
     * Rename this table
     */
    public DjangoSession rename(String name) {
        return new DjangoSession(name, null);
    }
}

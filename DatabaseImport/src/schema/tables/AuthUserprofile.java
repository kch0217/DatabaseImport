/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.AuthUserprofileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUserprofile extends TableImpl<AuthUserprofileRecord> {

    private static final long serialVersionUID = 2090007052;

    /**
     * The reference instance of <code>bitnami_edx.auth_userprofile</code>
     */
    public static final AuthUserprofile AUTH_USERPROFILE = new AuthUserprofile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthUserprofileRecord> getRecordType() {
        return AuthUserprofileRecord.class;
    }

    /**
     * The column <code>bitnami_edx.auth_userprofile.id</code>.
     */
    public final TableField<AuthUserprofileRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.name</code>.
     */
    public final TableField<AuthUserprofileRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.meta</code>.
     */
    public final TableField<AuthUserprofileRecord, String> META = createField("meta", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.courseware</code>.
     */
    public final TableField<AuthUserprofileRecord, String> COURSEWARE = createField("courseware", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.language</code>.
     */
    public final TableField<AuthUserprofileRecord, String> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.location</code>.
     */
    public final TableField<AuthUserprofileRecord, String> LOCATION = createField("location", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.year_of_birth</code>.
     */
    public final TableField<AuthUserprofileRecord, Integer> YEAR_OF_BIRTH = createField("year_of_birth", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.gender</code>.
     */
    public final TableField<AuthUserprofileRecord, String> GENDER = createField("gender", org.jooq.impl.SQLDataType.VARCHAR.length(6), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.level_of_education</code>.
     */
    public final TableField<AuthUserprofileRecord, String> LEVEL_OF_EDUCATION = createField("level_of_education", org.jooq.impl.SQLDataType.VARCHAR.length(6), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.mailing_address</code>.
     */
    public final TableField<AuthUserprofileRecord, String> MAILING_ADDRESS = createField("mailing_address", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.city</code>.
     */
    public final TableField<AuthUserprofileRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.country</code>.
     */
    public final TableField<AuthUserprofileRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(2), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.goals</code>.
     */
    public final TableField<AuthUserprofileRecord, String> GOALS = createField("goals", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.allow_certificate</code>.
     */
    public final TableField<AuthUserprofileRecord, Byte> ALLOW_CERTIFICATE = createField("allow_certificate", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.bio</code>.
     */
    public final TableField<AuthUserprofileRecord, String> BIO = createField("bio", org.jooq.impl.SQLDataType.VARCHAR.length(3000), this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.profile_image_uploaded_at</code>.
     */
    public final TableField<AuthUserprofileRecord, Timestamp> PROFILE_IMAGE_UPLOADED_AT = createField("profile_image_uploaded_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>bitnami_edx.auth_userprofile.user_id</code>.
     */
    public final TableField<AuthUserprofileRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.auth_userprofile</code> table reference
     */
    public AuthUserprofile() {
        this("auth_userprofile", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.auth_userprofile</code> table reference
     */
    public AuthUserprofile(String alias) {
        this(alias, AUTH_USERPROFILE);
    }

    private AuthUserprofile(String alias, Table<AuthUserprofileRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthUserprofile(String alias, Table<AuthUserprofileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuthUserprofileRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUTH_USERPROFILE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthUserprofileRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_USERPROFILE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthUserprofileRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthUserprofileRecord>>asList(Keys.KEY_AUTH_USERPROFILE_PRIMARY, Keys.KEY_AUTH_USERPROFILE_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthUserprofileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthUserprofileRecord, ?>>asList(Keys.AUTH_USERPROFILE_USER_ID_4C194F9B5650AD70_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthUserprofile as(String alias) {
        return new AuthUserprofile(alias, this);
    }

    /**
     * Rename this table
     */
    public AuthUserprofile rename(String name) {
        return new AuthUserprofile(name, null);
    }
}

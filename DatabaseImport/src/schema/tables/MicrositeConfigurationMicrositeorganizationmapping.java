/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.MicrositeConfigurationMicrositeorganizationmappingRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MicrositeConfigurationMicrositeorganizationmapping extends TableImpl<MicrositeConfigurationMicrositeorganizationmappingRecord> {

    private static final long serialVersionUID = 1071376210;

    /**
     * The reference instance of <code>bitnami_edx.microsite_configuration_micrositeorganizationmapping</code>
     */
    public static final MicrositeConfigurationMicrositeorganizationmapping MICROSITE_CONFIGURATION_MICROSITEORGANIZATIONMAPPING = new MicrositeConfigurationMicrositeorganizationmapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MicrositeConfigurationMicrositeorganizationmappingRecord> getRecordType() {
        return MicrositeConfigurationMicrositeorganizationmappingRecord.class;
    }

    /**
     * The column <code>bitnami_edx.microsite_configuration_micrositeorganizationmapping.id</code>.
     */
    public final TableField<MicrositeConfigurationMicrositeorganizationmappingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_micrositeorganizationmapping.organization</code>.
     */
    public final TableField<MicrositeConfigurationMicrositeorganizationmappingRecord, String> ORGANIZATION = createField("organization", org.jooq.impl.SQLDataType.VARCHAR.length(63).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_micrositeorganizationmapping.microsite_id</code>.
     */
    public final TableField<MicrositeConfigurationMicrositeorganizationmappingRecord, Integer> MICROSITE_ID = createField("microsite_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.microsite_configuration_micrositeorganizationmapping</code> table reference
     */
    public MicrositeConfigurationMicrositeorganizationmapping() {
        this("microsite_configuration_micrositeorganizationmapping", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.microsite_configuration_micrositeorganizationmapping</code> table reference
     */
    public MicrositeConfigurationMicrositeorganizationmapping(String alias) {
        this(alias, MICROSITE_CONFIGURATION_MICROSITEORGANIZATIONMAPPING);
    }

    private MicrositeConfigurationMicrositeorganizationmapping(String alias, Table<MicrositeConfigurationMicrositeorganizationmappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private MicrositeConfigurationMicrositeorganizationmapping(String alias, Table<MicrositeConfigurationMicrositeorganizationmappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MicrositeConfigurationMicrositeorganizationmappingRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MICROSITE_CONFIGURATION_MICROSITEORGANIZATIONMAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MicrositeConfigurationMicrositeorganizationmappingRecord> getPrimaryKey() {
        return Keys.KEY_MICROSITE_CONFIGURATION_MICROSITEORGANIZATIONMAPPING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MicrositeConfigurationMicrositeorganizationmappingRecord>> getKeys() {
        return Arrays.<UniqueKey<MicrositeConfigurationMicrositeorganizationmappingRecord>>asList(Keys.KEY_MICROSITE_CONFIGURATION_MICROSITEORGANIZATIONMAPPING_PRIMARY, Keys.KEY_MICROSITE_CONFIGURATION_MICROSITEORGANIZATIONMAPPING_ORGANIZATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MicrositeConfigurationMicrositeorganizationmappingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MicrositeConfigurationMicrositeorganizationmappingRecord, ?>>asList(Keys.D1C5D7DBBB2CDE12CE18B38D46F71EE0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MicrositeConfigurationMicrositeorganizationmapping as(String alias) {
        return new MicrositeConfigurationMicrositeorganizationmapping(alias, this);
    }

    /**
     * Rename this table
     */
    public MicrositeConfigurationMicrositeorganizationmapping rename(String name) {
        return new MicrositeConfigurationMicrositeorganizationmapping(name, null);
    }
}

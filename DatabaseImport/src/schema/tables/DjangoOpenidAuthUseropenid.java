/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.DjangoOpenidAuthUseropenidRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DjangoOpenidAuthUseropenid extends TableImpl<DjangoOpenidAuthUseropenidRecord> {

    private static final long serialVersionUID = -1410161466;

    /**
     * The reference instance of <code>bitnami_edx.django_openid_auth_useropenid</code>
     */
    public static final DjangoOpenidAuthUseropenid DJANGO_OPENID_AUTH_USEROPENID = new DjangoOpenidAuthUseropenid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DjangoOpenidAuthUseropenidRecord> getRecordType() {
        return DjangoOpenidAuthUseropenidRecord.class;
    }

    /**
     * The column <code>bitnami_edx.django_openid_auth_useropenid.id</code>.
     */
    public final TableField<DjangoOpenidAuthUseropenidRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_openid_auth_useropenid.claimed_id</code>.
     */
    public final TableField<DjangoOpenidAuthUseropenidRecord, String> CLAIMED_ID = createField("claimed_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_openid_auth_useropenid.display_id</code>.
     */
    public final TableField<DjangoOpenidAuthUseropenidRecord, String> DISPLAY_ID = createField("display_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_openid_auth_useropenid.user_id</code>.
     */
    public final TableField<DjangoOpenidAuthUseropenidRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.django_openid_auth_useropenid</code> table reference
     */
    public DjangoOpenidAuthUseropenid() {
        this("django_openid_auth_useropenid", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.django_openid_auth_useropenid</code> table reference
     */
    public DjangoOpenidAuthUseropenid(String alias) {
        this(alias, DJANGO_OPENID_AUTH_USEROPENID);
    }

    private DjangoOpenidAuthUseropenid(String alias, Table<DjangoOpenidAuthUseropenidRecord> aliased) {
        this(alias, aliased, null);
    }

    private DjangoOpenidAuthUseropenid(String alias, Table<DjangoOpenidAuthUseropenidRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DjangoOpenidAuthUseropenidRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DJANGO_OPENID_AUTH_USEROPENID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DjangoOpenidAuthUseropenidRecord> getPrimaryKey() {
        return Keys.KEY_DJANGO_OPENID_AUTH_USEROPENID_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DjangoOpenidAuthUseropenidRecord>> getKeys() {
        return Arrays.<UniqueKey<DjangoOpenidAuthUseropenidRecord>>asList(Keys.KEY_DJANGO_OPENID_AUTH_USEROPENID_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DjangoOpenidAuthUseropenidRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DjangoOpenidAuthUseropenidRecord, ?>>asList(Keys.DJANGO_OPENID_AUTH_USER_USER_ID_136119E72782E2CF_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthUseropenid as(String alias) {
        return new DjangoOpenidAuthUseropenid(alias, this);
    }

    /**
     * Rename this table
     */
    public DjangoOpenidAuthUseropenid rename(String name) {
        return new DjangoOpenidAuthUseropenid(name, null);
    }
}

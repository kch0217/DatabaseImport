/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.MicrositeConfigurationMicrositeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MicrositeConfigurationMicrosite extends TableImpl<MicrositeConfigurationMicrositeRecord> {

    private static final long serialVersionUID = 957164344;

    /**
     * The reference instance of <code>bitnami_edx.microsite_configuration_microsite</code>
     */
    public static final MicrositeConfigurationMicrosite MICROSITE_CONFIGURATION_MICROSITE = new MicrositeConfigurationMicrosite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MicrositeConfigurationMicrositeRecord> getRecordType() {
        return MicrositeConfigurationMicrositeRecord.class;
    }

    /**
     * The column <code>bitnami_edx.microsite_configuration_microsite.id</code>.
     */
    public final TableField<MicrositeConfigurationMicrositeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_microsite.key</code>.
     */
    public final TableField<MicrositeConfigurationMicrositeRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(63).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_microsite.values</code>.
     */
    public final TableField<MicrositeConfigurationMicrositeRecord, String> VALUES = createField("values", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_microsite.site_id</code>.
     */
    public final TableField<MicrositeConfigurationMicrositeRecord, Integer> SITE_ID = createField("site_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.microsite_configuration_microsite</code> table reference
     */
    public MicrositeConfigurationMicrosite() {
        this("microsite_configuration_microsite", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.microsite_configuration_microsite</code> table reference
     */
    public MicrositeConfigurationMicrosite(String alias) {
        this(alias, MICROSITE_CONFIGURATION_MICROSITE);
    }

    private MicrositeConfigurationMicrosite(String alias, Table<MicrositeConfigurationMicrositeRecord> aliased) {
        this(alias, aliased, null);
    }

    private MicrositeConfigurationMicrosite(String alias, Table<MicrositeConfigurationMicrositeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MicrositeConfigurationMicrositeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MICROSITE_CONFIGURATION_MICROSITE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MicrositeConfigurationMicrositeRecord> getPrimaryKey() {
        return Keys.KEY_MICROSITE_CONFIGURATION_MICROSITE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MicrositeConfigurationMicrositeRecord>> getKeys() {
        return Arrays.<UniqueKey<MicrositeConfigurationMicrositeRecord>>asList(Keys.KEY_MICROSITE_CONFIGURATION_MICROSITE_PRIMARY, Keys.KEY_MICROSITE_CONFIGURATION_MICROSITE_KEY, Keys.KEY_MICROSITE_CONFIGURATION_MICROSITE_SITE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MicrositeConfigurationMicrositeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MicrositeConfigurationMicrositeRecord, ?>>asList(Keys.MICROSITE_CONFIGURATIO_SITE_ID_3EBE20A76DE5AA4_FK_DJANGO_SITE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MicrositeConfigurationMicrosite as(String alias) {
        return new MicrositeConfigurationMicrosite(alias, this);
    }

    /**
     * Rename this table
     */
    public MicrositeConfigurationMicrosite rename(String name) {
        return new MicrositeConfigurationMicrosite(name, null);
    }
}

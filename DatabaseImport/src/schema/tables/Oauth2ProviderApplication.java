/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.Oauth2ProviderApplicationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Oauth2ProviderApplication extends TableImpl<Oauth2ProviderApplicationRecord> {

    private static final long serialVersionUID = 1882255760;

    /**
     * The reference instance of <code>bitnami_edx.oauth2_provider_application</code>
     */
    public static final Oauth2ProviderApplication OAUTH2_PROVIDER_APPLICATION = new Oauth2ProviderApplication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Oauth2ProviderApplicationRecord> getRecordType() {
        return Oauth2ProviderApplicationRecord.class;
    }

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.id</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.client_id</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.redirect_uris</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, String> REDIRECT_URIS = createField("redirect_uris", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.client_type</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, String> CLIENT_TYPE = createField("client_type", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.authorization_grant_type</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, String> AUTHORIZATION_GRANT_TYPE = createField("authorization_grant_type", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.client_secret</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, String> CLIENT_SECRET = createField("client_secret", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.name</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.user_id</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_application.skip_authorization</code>.
     */
    public final TableField<Oauth2ProviderApplicationRecord, Byte> SKIP_AUTHORIZATION = createField("skip_authorization", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.oauth2_provider_application</code> table reference
     */
    public Oauth2ProviderApplication() {
        this("oauth2_provider_application", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.oauth2_provider_application</code> table reference
     */
    public Oauth2ProviderApplication(String alias) {
        this(alias, OAUTH2_PROVIDER_APPLICATION);
    }

    private Oauth2ProviderApplication(String alias, Table<Oauth2ProviderApplicationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Oauth2ProviderApplication(String alias, Table<Oauth2ProviderApplicationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Oauth2ProviderApplicationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OAUTH2_PROVIDER_APPLICATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Oauth2ProviderApplicationRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH2_PROVIDER_APPLICATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Oauth2ProviderApplicationRecord>> getKeys() {
        return Arrays.<UniqueKey<Oauth2ProviderApplicationRecord>>asList(Keys.KEY_OAUTH2_PROVIDER_APPLICATION_PRIMARY, Keys.KEY_OAUTH2_PROVIDER_APPLICATION_CLIENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Oauth2ProviderApplicationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<Oauth2ProviderApplicationRecord, ?>>asList(Keys.OAUTH2_PROVIDER_APPLICA_USER_ID_7FA13387C260B798_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Oauth2ProviderApplication as(String alias) {
        return new Oauth2ProviderApplication(alias, this);
    }

    /**
     * Rename this table
     */
    public Oauth2ProviderApplication rename(String name) {
        return new Oauth2ProviderApplication(name, null);
    }
}

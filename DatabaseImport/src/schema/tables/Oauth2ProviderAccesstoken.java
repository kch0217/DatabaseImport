/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.Oauth2ProviderAccesstokenRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Oauth2ProviderAccesstoken extends TableImpl<Oauth2ProviderAccesstokenRecord> {

    private static final long serialVersionUID = -637712598;

    /**
     * The reference instance of <code>bitnami_edx.oauth2_provider_accesstoken</code>
     */
    public static final Oauth2ProviderAccesstoken OAUTH2_PROVIDER_ACCESSTOKEN = new Oauth2ProviderAccesstoken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Oauth2ProviderAccesstokenRecord> getRecordType() {
        return Oauth2ProviderAccesstokenRecord.class;
    }

    /**
     * The column <code>bitnami_edx.oauth2_provider_accesstoken.id</code>.
     */
    public final TableField<Oauth2ProviderAccesstokenRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_accesstoken.token</code>.
     */
    public final TableField<Oauth2ProviderAccesstokenRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_accesstoken.expires</code>.
     */
    public final TableField<Oauth2ProviderAccesstokenRecord, Timestamp> EXPIRES = createField("expires", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_accesstoken.scope</code>.
     */
    public final TableField<Oauth2ProviderAccesstokenRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_accesstoken.application_id</code>.
     */
    public final TableField<Oauth2ProviderAccesstokenRecord, Integer> APPLICATION_ID = createField("application_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_accesstoken.user_id</code>.
     */
    public final TableField<Oauth2ProviderAccesstokenRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>bitnami_edx.oauth2_provider_accesstoken</code> table reference
     */
    public Oauth2ProviderAccesstoken() {
        this("oauth2_provider_accesstoken", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.oauth2_provider_accesstoken</code> table reference
     */
    public Oauth2ProviderAccesstoken(String alias) {
        this(alias, OAUTH2_PROVIDER_ACCESSTOKEN);
    }

    private Oauth2ProviderAccesstoken(String alias, Table<Oauth2ProviderAccesstokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Oauth2ProviderAccesstoken(String alias, Table<Oauth2ProviderAccesstokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Oauth2ProviderAccesstokenRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OAUTH2_PROVIDER_ACCESSTOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Oauth2ProviderAccesstokenRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH2_PROVIDER_ACCESSTOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Oauth2ProviderAccesstokenRecord>> getKeys() {
        return Arrays.<UniqueKey<Oauth2ProviderAccesstokenRecord>>asList(Keys.KEY_OAUTH2_PROVIDER_ACCESSTOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Oauth2ProviderAccesstokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<Oauth2ProviderAccesstokenRecord, ?>>asList(Keys.D5AC3019EE1C474FD85718B015E3D3A1, Keys.OAUTH2_PROVIDER_ACCESST_USER_ID_5E2F004FDEBEA22D_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Oauth2ProviderAccesstoken as(String alias) {
        return new Oauth2ProviderAccesstoken(alias, this);
    }

    /**
     * Rename this table
     */
    public Oauth2ProviderAccesstoken rename(String name) {
        return new Oauth2ProviderAccesstoken(name, null);
    }
}

/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.MicrositeConfigurationHistoricalmicrositetemplateRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MicrositeConfigurationHistoricalmicrositetemplate extends TableImpl<MicrositeConfigurationHistoricalmicrositetemplateRecord> {

    private static final long serialVersionUID = 175522878;

    /**
     * The reference instance of <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate</code>
     */
    public static final MicrositeConfigurationHistoricalmicrositetemplate MICROSITE_CONFIGURATION_HISTORICALMICROSITETEMPLATE = new MicrositeConfigurationHistoricalmicrositetemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MicrositeConfigurationHistoricalmicrositetemplateRecord> getRecordType() {
        return MicrositeConfigurationHistoricalmicrositetemplateRecord.class;
    }

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.id</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.template_uri</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, String> TEMPLATE_URI = createField("template_uri", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.template</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, String> TEMPLATE = createField("template", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.history_id</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, Integer> HISTORY_ID = createField("history_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.history_date</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, Timestamp> HISTORY_DATE = createField("history_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.history_type</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, String> HISTORY_TYPE = createField("history_type", org.jooq.impl.SQLDataType.VARCHAR.length(1).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.history_user_id</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, Integer> HISTORY_USER_ID = createField("history_user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate.microsite_id</code>.
     */
    public final TableField<MicrositeConfigurationHistoricalmicrositetemplateRecord, Integer> MICROSITE_ID = createField("microsite_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate</code> table reference
     */
    public MicrositeConfigurationHistoricalmicrositetemplate() {
        this("microsite_configuration_historicalmicrositetemplate", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.microsite_configuration_historicalmicrositetemplate</code> table reference
     */
    public MicrositeConfigurationHistoricalmicrositetemplate(String alias) {
        this(alias, MICROSITE_CONFIGURATION_HISTORICALMICROSITETEMPLATE);
    }

    private MicrositeConfigurationHistoricalmicrositetemplate(String alias, Table<MicrositeConfigurationHistoricalmicrositetemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private MicrositeConfigurationHistoricalmicrositetemplate(String alias, Table<MicrositeConfigurationHistoricalmicrositetemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MicrositeConfigurationHistoricalmicrositetemplateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MICROSITE_CONFIGURATION_HISTORICALMICROSITETEMPLATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MicrositeConfigurationHistoricalmicrositetemplateRecord> getPrimaryKey() {
        return Keys.KEY_MICROSITE_CONFIGURATION_HISTORICALMICROSITETEMPLATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MicrositeConfigurationHistoricalmicrositetemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<MicrositeConfigurationHistoricalmicrositetemplateRecord>>asList(Keys.KEY_MICROSITE_CONFIGURATION_HISTORICALMICROSITETEMPLATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MicrositeConfigurationHistoricalmicrositetemplateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MicrositeConfigurationHistoricalmicrositetemplateRecord, ?>>asList(Keys.MICROSITE_CONFI_HISTORY_USER_ID_53E1B0DCB708D6EF_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MicrositeConfigurationHistoricalmicrositetemplate as(String alias) {
        return new MicrositeConfigurationHistoricalmicrositetemplate(alias, this);
    }

    /**
     * Rename this table
     */
    public MicrositeConfigurationHistoricalmicrositetemplate rename(String name) {
        return new MicrositeConfigurationHistoricalmicrositetemplate(name, null);
    }
}

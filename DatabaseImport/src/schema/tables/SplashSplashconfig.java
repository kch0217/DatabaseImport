/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.SplashSplashconfigRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SplashSplashconfig extends TableImpl<SplashSplashconfigRecord> {

    private static final long serialVersionUID = 1066158865;

    /**
     * The reference instance of <code>bitnami_edx.splash_splashconfig</code>
     */
    public static final SplashSplashconfig SPLASH_SPLASHCONFIG = new SplashSplashconfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SplashSplashconfigRecord> getRecordType() {
        return SplashSplashconfigRecord.class;
    }

    /**
     * The column <code>bitnami_edx.splash_splashconfig.id</code>.
     */
    public final TableField<SplashSplashconfigRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.change_date</code>.
     */
    public final TableField<SplashSplashconfigRecord, Timestamp> CHANGE_DATE = createField("change_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.enabled</code>.
     */
    public final TableField<SplashSplashconfigRecord, Byte> ENABLED = createField("enabled", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.cookie_name</code>.
     */
    public final TableField<SplashSplashconfigRecord, String> COOKIE_NAME = createField("cookie_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.cookie_allowed_values</code>.
     */
    public final TableField<SplashSplashconfigRecord, String> COOKIE_ALLOWED_VALUES = createField("cookie_allowed_values", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.unaffected_usernames</code>.
     */
    public final TableField<SplashSplashconfigRecord, String> UNAFFECTED_USERNAMES = createField("unaffected_usernames", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.unaffected_url_paths</code>.
     */
    public final TableField<SplashSplashconfigRecord, String> UNAFFECTED_URL_PATHS = createField("unaffected_url_paths", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.redirect_url</code>.
     */
    public final TableField<SplashSplashconfigRecord, String> REDIRECT_URL = createField("redirect_url", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.splash_splashconfig.changed_by_id</code>.
     */
    public final TableField<SplashSplashconfigRecord, Integer> CHANGED_BY_ID = createField("changed_by_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>bitnami_edx.splash_splashconfig</code> table reference
     */
    public SplashSplashconfig() {
        this("splash_splashconfig", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.splash_splashconfig</code> table reference
     */
    public SplashSplashconfig(String alias) {
        this(alias, SPLASH_SPLASHCONFIG);
    }

    private SplashSplashconfig(String alias, Table<SplashSplashconfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private SplashSplashconfig(String alias, Table<SplashSplashconfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SplashSplashconfigRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SPLASH_SPLASHCONFIG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SplashSplashconfigRecord> getPrimaryKey() {
        return Keys.KEY_SPLASH_SPLASHCONFIG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SplashSplashconfigRecord>> getKeys() {
        return Arrays.<UniqueKey<SplashSplashconfigRecord>>asList(Keys.KEY_SPLASH_SPLASHCONFIG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SplashSplashconfigRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SplashSplashconfigRecord, ?>>asList(Keys.SPLASH_SPLASHCONF_CHANGED_BY_ID_735B38AD8ED19270_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfig as(String alias) {
        return new SplashSplashconfig(alias, this);
    }

    /**
     * Rename this table
     */
    public SplashSplashconfig rename(String name) {
        return new SplashSplashconfig(name, null);
    }
}

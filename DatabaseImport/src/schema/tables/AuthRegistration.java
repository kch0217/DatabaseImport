/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.AuthRegistrationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthRegistration extends TableImpl<AuthRegistrationRecord> {

    private static final long serialVersionUID = -144004188;

    /**
     * The reference instance of <code>bitnami_edx.auth_registration</code>
     */
    public static final AuthRegistration AUTH_REGISTRATION = new AuthRegistration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthRegistrationRecord> getRecordType() {
        return AuthRegistrationRecord.class;
    }

    /**
     * The column <code>bitnami_edx.auth_registration.id</code>.
     */
    public final TableField<AuthRegistrationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_registration.activation_key</code>.
     */
    public final TableField<AuthRegistrationRecord, String> ACTIVATION_KEY = createField("activation_key", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_registration.user_id</code>.
     */
    public final TableField<AuthRegistrationRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.auth_registration</code> table reference
     */
    public AuthRegistration() {
        this("auth_registration", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.auth_registration</code> table reference
     */
    public AuthRegistration(String alias) {
        this(alias, AUTH_REGISTRATION);
    }

    private AuthRegistration(String alias, Table<AuthRegistrationRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthRegistration(String alias, Table<AuthRegistrationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuthRegistrationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUTH_REGISTRATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthRegistrationRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_REGISTRATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthRegistrationRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthRegistrationRecord>>asList(Keys.KEY_AUTH_REGISTRATION_PRIMARY, Keys.KEY_AUTH_REGISTRATION_ACTIVATION_KEY, Keys.KEY_AUTH_REGISTRATION_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthRegistrationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthRegistrationRecord, ?>>asList(Keys.AUTH_REGISTRATION_USER_ID_734AF68780D0CF34_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthRegistration as(String alias) {
        return new AuthRegistration(alias, this);
    }

    /**
     * Rename this table
     */
    public AuthRegistration rename(String name) {
        return new AuthRegistration(name, null);
    }
}

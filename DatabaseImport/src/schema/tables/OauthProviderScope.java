/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.OauthProviderScopeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthProviderScope extends TableImpl<OauthProviderScopeRecord> {

    private static final long serialVersionUID = 360010262;

    /**
     * The reference instance of <code>bitnami_edx.oauth_provider_scope</code>
     */
    public static final OauthProviderScope OAUTH_PROVIDER_SCOPE = new OauthProviderScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthProviderScopeRecord> getRecordType() {
        return OauthProviderScopeRecord.class;
    }

    /**
     * The column <code>bitnami_edx.oauth_provider_scope.id</code>.
     */
    public final TableField<OauthProviderScopeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_scope.name</code>.
     */
    public final TableField<OauthProviderScopeRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_scope.url</code>.
     */
    public final TableField<OauthProviderScopeRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth_provider_scope.is_readonly</code>.
     */
    public final TableField<OauthProviderScopeRecord, Byte> IS_READONLY = createField("is_readonly", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.oauth_provider_scope</code> table reference
     */
    public OauthProviderScope() {
        this("oauth_provider_scope", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.oauth_provider_scope</code> table reference
     */
    public OauthProviderScope(String alias) {
        this(alias, OAUTH_PROVIDER_SCOPE);
    }

    private OauthProviderScope(String alias, Table<OauthProviderScopeRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthProviderScope(String alias, Table<OauthProviderScopeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OauthProviderScopeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OAUTH_PROVIDER_SCOPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthProviderScopeRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_PROVIDER_SCOPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthProviderScopeRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthProviderScopeRecord>>asList(Keys.KEY_OAUTH_PROVIDER_SCOPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderScope as(String alias) {
        return new OauthProviderScope(alias, this);
    }

    /**
     * Rename this table
     */
    public OauthProviderScope rename(String name) {
        return new OauthProviderScope(name, null);
    }
}

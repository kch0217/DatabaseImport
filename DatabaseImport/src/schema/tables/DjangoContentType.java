/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.DjangoContentTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DjangoContentType extends TableImpl<DjangoContentTypeRecord> {

    private static final long serialVersionUID = 1377884855;

    /**
     * The reference instance of <code>bitnami_edx.django_content_type</code>
     */
    public static final DjangoContentType DJANGO_CONTENT_TYPE = new DjangoContentType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DjangoContentTypeRecord> getRecordType() {
        return DjangoContentTypeRecord.class;
    }

    /**
     * The column <code>bitnami_edx.django_content_type.id</code>.
     */
    public final TableField<DjangoContentTypeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_content_type.app_label</code>.
     */
    public final TableField<DjangoContentTypeRecord, String> APP_LABEL = createField("app_label", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_content_type.model</code>.
     */
    public final TableField<DjangoContentTypeRecord, String> MODEL = createField("model", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.django_content_type</code> table reference
     */
    public DjangoContentType() {
        this("django_content_type", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.django_content_type</code> table reference
     */
    public DjangoContentType(String alias) {
        this(alias, DJANGO_CONTENT_TYPE);
    }

    private DjangoContentType(String alias, Table<DjangoContentTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DjangoContentType(String alias, Table<DjangoContentTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DjangoContentTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DJANGO_CONTENT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DjangoContentTypeRecord> getPrimaryKey() {
        return Keys.KEY_DJANGO_CONTENT_TYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DjangoContentTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<DjangoContentTypeRecord>>asList(Keys.KEY_DJANGO_CONTENT_TYPE_PRIMARY, Keys.KEY_DJANGO_CONTENT_TYPE_DJANGO_CONTENT_TYPE_APP_LABEL_45F3B1D93EC8C61C_UNIQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoContentType as(String alias) {
        return new DjangoContentType(alias, this);
    }

    /**
     * Rename this table
     */
    public DjangoContentType rename(String name) {
        return new DjangoContentType(name, null);
    }
}

/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.Oauth2ProviderRefreshtokenRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Oauth2ProviderRefreshtoken extends TableImpl<Oauth2ProviderRefreshtokenRecord> {

    private static final long serialVersionUID = 1301355152;

    /**
     * The reference instance of <code>bitnami_edx.oauth2_provider_refreshtoken</code>
     */
    public static final Oauth2ProviderRefreshtoken OAUTH2_PROVIDER_REFRESHTOKEN = new Oauth2ProviderRefreshtoken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Oauth2ProviderRefreshtokenRecord> getRecordType() {
        return Oauth2ProviderRefreshtokenRecord.class;
    }

    /**
     * The column <code>bitnami_edx.oauth2_provider_refreshtoken.id</code>.
     */
    public final TableField<Oauth2ProviderRefreshtokenRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_refreshtoken.token</code>.
     */
    public final TableField<Oauth2ProviderRefreshtokenRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_refreshtoken.access_token_id</code>.
     */
    public final TableField<Oauth2ProviderRefreshtokenRecord, Integer> ACCESS_TOKEN_ID = createField("access_token_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_refreshtoken.application_id</code>.
     */
    public final TableField<Oauth2ProviderRefreshtokenRecord, Integer> APPLICATION_ID = createField("application_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.oauth2_provider_refreshtoken.user_id</code>.
     */
    public final TableField<Oauth2ProviderRefreshtokenRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.oauth2_provider_refreshtoken</code> table reference
     */
    public Oauth2ProviderRefreshtoken() {
        this("oauth2_provider_refreshtoken", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.oauth2_provider_refreshtoken</code> table reference
     */
    public Oauth2ProviderRefreshtoken(String alias) {
        this(alias, OAUTH2_PROVIDER_REFRESHTOKEN);
    }

    private Oauth2ProviderRefreshtoken(String alias, Table<Oauth2ProviderRefreshtokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Oauth2ProviderRefreshtoken(String alias, Table<Oauth2ProviderRefreshtokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Oauth2ProviderRefreshtokenRecord, Integer> getIdentity() {
        return Keys.IDENTITY_OAUTH2_PROVIDER_REFRESHTOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Oauth2ProviderRefreshtokenRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH2_PROVIDER_REFRESHTOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Oauth2ProviderRefreshtokenRecord>> getKeys() {
        return Arrays.<UniqueKey<Oauth2ProviderRefreshtokenRecord>>asList(Keys.KEY_OAUTH2_PROVIDER_REFRESHTOKEN_PRIMARY, Keys.KEY_OAUTH2_PROVIDER_REFRESHTOKEN_ACCESS_TOKEN_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<Oauth2ProviderRefreshtokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<Oauth2ProviderRefreshtokenRecord, ?>>asList(Keys.B58D9CB3B93AFB36B11B7741BF1BCC1A, Keys.D3E264CEEC355CABED6FF9976FC42A06, Keys.OAUTH2_PROVIDER_REFRESH_USER_ID_3F695B639CFBC9A3_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Oauth2ProviderRefreshtoken as(String alias) {
        return new Oauth2ProviderRefreshtoken(alias, this);
    }

    /**
     * Rename this table
     */
    public Oauth2ProviderRefreshtoken rename(String name) {
        return new Oauth2ProviderRefreshtoken(name, null);
    }
}

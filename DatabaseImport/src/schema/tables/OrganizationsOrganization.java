/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.OrganizationsOrganizationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationsOrganization extends TableImpl<OrganizationsOrganizationRecord> {

    private static final long serialVersionUID = -895526276;

    /**
     * The reference instance of <code>bitnami_edx.organizations_organization</code>
     */
    public static final OrganizationsOrganization ORGANIZATIONS_ORGANIZATION = new OrganizationsOrganization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationsOrganizationRecord> getRecordType() {
        return OrganizationsOrganizationRecord.class;
    }

    /**
     * The column <code>bitnami_edx.organizations_organization.id</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.organizations_organization.created</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.organizations_organization.modified</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.organizations_organization.name</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.organizations_organization.short_name</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, String> SHORT_NAME = createField("short_name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.organizations_organization.description</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.organizations_organization.logo</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, String> LOGO = createField("logo", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>bitnami_edx.organizations_organization.active</code>.
     */
    public final TableField<OrganizationsOrganizationRecord, Byte> ACTIVE = createField("active", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.organizations_organization</code> table reference
     */
    public OrganizationsOrganization() {
        this("organizations_organization", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.organizations_organization</code> table reference
     */
    public OrganizationsOrganization(String alias) {
        this(alias, ORGANIZATIONS_ORGANIZATION);
    }

    private OrganizationsOrganization(String alias, Table<OrganizationsOrganizationRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrganizationsOrganization(String alias, Table<OrganizationsOrganizationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrganizationsOrganizationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORGANIZATIONS_ORGANIZATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrganizationsOrganizationRecord> getPrimaryKey() {
        return Keys.KEY_ORGANIZATIONS_ORGANIZATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrganizationsOrganizationRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganizationsOrganizationRecord>>asList(Keys.KEY_ORGANIZATIONS_ORGANIZATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrganizationsOrganization as(String alias) {
        return new OrganizationsOrganization(alias, this);
    }

    /**
     * Rename this table
     */
    public OrganizationsOrganization rename(String name) {
        return new OrganizationsOrganization(name, null);
    }
}

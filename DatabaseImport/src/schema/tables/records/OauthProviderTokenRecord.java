/**
 * This class is generated by jOOQ
 */
package schema.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;

import schema.tables.OauthProviderToken;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthProviderTokenRecord extends UpdatableRecordImpl<OauthProviderTokenRecord> implements Record12<Integer, String, String, Short, Integer, Byte, String, String, Byte, Integer, Integer, Integer> {

    private static final long serialVersionUID = 210991497;

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.key</code>.
     */
    public void setKey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.key</code>.
     */
    public String getKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.secret</code>.
     */
    public void setSecret(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.secret</code>.
     */
    public String getSecret() {
        return (String) get(2);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.token_type</code>.
     */
    public void setTokenType(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.token_type</code>.
     */
    public Short getTokenType() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.timestamp</code>.
     */
    public void setTimestamp(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.timestamp</code>.
     */
    public Integer getTimestamp() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.is_approved</code>.
     */
    public void setIsApproved(Byte value) {
        set(5, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.is_approved</code>.
     */
    public Byte getIsApproved() {
        return (Byte) get(5);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.verifier</code>.
     */
    public void setVerifier(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.verifier</code>.
     */
    public String getVerifier() {
        return (String) get(6);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.callback</code>.
     */
    public void setCallback(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.callback</code>.
     */
    public String getCallback() {
        return (String) get(7);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.callback_confirmed</code>.
     */
    public void setCallbackConfirmed(Byte value) {
        set(8, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.callback_confirmed</code>.
     */
    public Byte getCallbackConfirmed() {
        return (Byte) get(8);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.consumer_id</code>.
     */
    public void setConsumerId(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.consumer_id</code>.
     */
    public Integer getConsumerId() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.scope_id</code>.
     */
    public void setScopeId(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.scope_id</code>.
     */
    public Integer getScopeId() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_token.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_token.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<Integer, String, String, Short, Integer, Byte, String, String, Byte, Integer, Integer, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<Integer, String, String, Short, Integer, Byte, String, String, Byte, Integer, Integer, Integer> valuesRow() {
        return (Row12) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.SECRET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field4() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.TOKEN_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.TIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field6() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.IS_APPROVED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.VERIFIER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.CALLBACK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field9() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.CALLBACK_CONFIRMED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field10() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.CONSUMER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field11() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.SCOPE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field12() {
        return OauthProviderToken.OAUTH_PROVIDER_TOKEN.USER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getSecret();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value4() {
        return getTokenType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value6() {
        return getIsApproved();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getVerifier();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getCallback();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value9() {
        return getCallbackConfirmed();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value10() {
        return getConsumerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value11() {
        return getScopeId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value12() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value2(String value) {
        setKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value3(String value) {
        setSecret(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value4(Short value) {
        setTokenType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value5(Integer value) {
        setTimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value6(Byte value) {
        setIsApproved(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value7(String value) {
        setVerifier(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value8(String value) {
        setCallback(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value9(Byte value) {
        setCallbackConfirmed(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value10(Integer value) {
        setConsumerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value11(Integer value) {
        setScopeId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord value12(Integer value) {
        setUserId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderTokenRecord values(Integer value1, String value2, String value3, Short value4, Integer value5, Byte value6, String value7, String value8, Byte value9, Integer value10, Integer value11, Integer value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OauthProviderTokenRecord
     */
    public OauthProviderTokenRecord() {
        super(OauthProviderToken.OAUTH_PROVIDER_TOKEN);
    }

    /**
     * Create a detached, initialised OauthProviderTokenRecord
     */
    public OauthProviderTokenRecord(Integer id, String key, String secret, Short tokenType, Integer timestamp, Byte isApproved, String verifier, String callback, Byte callbackConfirmed, Integer consumerId, Integer scopeId, Integer userId) {
        super(OauthProviderToken.OAUTH_PROVIDER_TOKEN);

        set(0, id);
        set(1, key);
        set(2, secret);
        set(3, tokenType);
        set(4, timestamp);
        set(5, isApproved);
        set(6, verifier);
        set(7, callback);
        set(8, callbackConfirmed);
        set(9, consumerId);
        set(10, scopeId);
        set(11, userId);
    }
}

/**
 * This class is generated by jOOQ
 */
package schema.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;

import schema.tables.OauthProviderNonce;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthProviderNonceRecord extends UpdatableRecordImpl<OauthProviderNonceRecord> implements Record5<Integer, String, String, String, UInteger> {

    private static final long serialVersionUID = -517162063;

    /**
     * Setter for <code>bitnami_edx.oauth_provider_nonce.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_nonce.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_nonce.token_key</code>.
     */
    public void setTokenKey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_nonce.token_key</code>.
     */
    public String getTokenKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_nonce.consumer_key</code>.
     */
    public void setConsumerKey(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_nonce.consumer_key</code>.
     */
    public String getConsumerKey() {
        return (String) get(2);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_nonce.key</code>.
     */
    public void setKey(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_nonce.key</code>.
     */
    public String getKey() {
        return (String) get(3);
    }

    /**
     * Setter for <code>bitnami_edx.oauth_provider_nonce.timestamp</code>.
     */
    public void setTimestamp(UInteger value) {
        set(4, value);
    }

    /**
     * Getter for <code>bitnami_edx.oauth_provider_nonce.timestamp</code>.
     */
    public UInteger getTimestamp() {
        return (UInteger) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, String, String, UInteger> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, String, String, UInteger> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return OauthProviderNonce.OAUTH_PROVIDER_NONCE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return OauthProviderNonce.OAUTH_PROVIDER_NONCE.TOKEN_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return OauthProviderNonce.OAUTH_PROVIDER_NONCE.CONSUMER_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return OauthProviderNonce.OAUTH_PROVIDER_NONCE.KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field5() {
        return OauthProviderNonce.OAUTH_PROVIDER_NONCE.TIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTokenKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getConsumerKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value5() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderNonceRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderNonceRecord value2(String value) {
        setTokenKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderNonceRecord value3(String value) {
        setConsumerKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderNonceRecord value4(String value) {
        setKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderNonceRecord value5(UInteger value) {
        setTimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthProviderNonceRecord values(Integer value1, String value2, String value3, String value4, UInteger value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OauthProviderNonceRecord
     */
    public OauthProviderNonceRecord() {
        super(OauthProviderNonce.OAUTH_PROVIDER_NONCE);
    }

    /**
     * Create a detached, initialised OauthProviderNonceRecord
     */
    public OauthProviderNonceRecord(Integer id, String tokenKey, String consumerKey, String key, UInteger timestamp) {
        super(OauthProviderNonce.OAUTH_PROVIDER_NONCE);

        set(0, id);
        set(1, tokenKey);
        set(2, consumerKey);
        set(3, key);
        set(4, timestamp);
    }
}

/**
 * This class is generated by jOOQ
 */
package schema.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;

import schema.tables.SplashSplashconfig;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SplashSplashconfigRecord extends UpdatableRecordImpl<SplashSplashconfigRecord> implements Record9<Integer, Timestamp, Byte, String, String, String, String, String, Integer> {

    private static final long serialVersionUID = 1182722442;

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.change_date</code>.
     */
    public void setChangeDate(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.change_date</code>.
     */
    public Timestamp getChangeDate() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.enabled</code>.
     */
    public void setEnabled(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.enabled</code>.
     */
    public Byte getEnabled() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.cookie_name</code>.
     */
    public void setCookieName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.cookie_name</code>.
     */
    public String getCookieName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.cookie_allowed_values</code>.
     */
    public void setCookieAllowedValues(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.cookie_allowed_values</code>.
     */
    public String getCookieAllowedValues() {
        return (String) get(4);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.unaffected_usernames</code>.
     */
    public void setUnaffectedUsernames(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.unaffected_usernames</code>.
     */
    public String getUnaffectedUsernames() {
        return (String) get(5);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.unaffected_url_paths</code>.
     */
    public void setUnaffectedUrlPaths(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.unaffected_url_paths</code>.
     */
    public String getUnaffectedUrlPaths() {
        return (String) get(6);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.redirect_url</code>.
     */
    public void setRedirectUrl(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.redirect_url</code>.
     */
    public String getRedirectUrl() {
        return (String) get(7);
    }

    /**
     * Setter for <code>bitnami_edx.splash_splashconfig.changed_by_id</code>.
     */
    public void setChangedById(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>bitnami_edx.splash_splashconfig.changed_by_id</code>.
     */
    public Integer getChangedById() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row9<Integer, Timestamp, Byte, String, String, String, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row9<Integer, Timestamp, Byte, String, String, String, String, String, Integer> valuesRow() {
        return (Row9) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field2() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.CHANGE_DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field3() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.ENABLED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.COOKIE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.COOKIE_ALLOWED_VALUES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.UNAFFECTED_USERNAMES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.UNAFFECTED_URL_PATHS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field8() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.REDIRECT_URL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field9() {
        return SplashSplashconfig.SPLASH_SPLASHCONFIG.CHANGED_BY_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value2() {
        return getChangeDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value3() {
        return getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getCookieName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getCookieAllowedValues();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getUnaffectedUsernames();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getUnaffectedUrlPaths();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value8() {
        return getRedirectUrl();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value9() {
        return getChangedById();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value2(Timestamp value) {
        setChangeDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value3(Byte value) {
        setEnabled(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value4(String value) {
        setCookieName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value5(String value) {
        setCookieAllowedValues(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value6(String value) {
        setUnaffectedUsernames(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value7(String value) {
        setUnaffectedUrlPaths(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value8(String value) {
        setRedirectUrl(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord value9(Integer value) {
        setChangedById(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SplashSplashconfigRecord values(Integer value1, Timestamp value2, Byte value3, String value4, String value5, String value6, String value7, String value8, Integer value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SplashSplashconfigRecord
     */
    public SplashSplashconfigRecord() {
        super(SplashSplashconfig.SPLASH_SPLASHCONFIG);
    }

    /**
     * Create a detached, initialised SplashSplashconfigRecord
     */
    public SplashSplashconfigRecord(Integer id, Timestamp changeDate, Byte enabled, String cookieName, String cookieAllowedValues, String unaffectedUsernames, String unaffectedUrlPaths, String redirectUrl, Integer changedById) {
        super(SplashSplashconfig.SPLASH_SPLASHCONFIG);

        set(0, id);
        set(1, changeDate);
        set(2, enabled);
        set(3, cookieName);
        set(4, cookieAllowedValues);
        set(5, unaffectedUsernames);
        set(6, unaffectedUrlPaths);
        set(7, redirectUrl);
        set(8, changedById);
    }
}

/**
 * This class is generated by jOOQ
 */
package schema.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import schema.tables.DjangoOpenidAuthAssociation;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DjangoOpenidAuthAssociationRecord extends UpdatableRecordImpl<DjangoOpenidAuthAssociationRecord> implements Record7<Integer, String, String, String, Integer, Integer, String> {

    private static final long serialVersionUID = -550545859;

    /**
     * Setter for <code>bitnami_edx.django_openid_auth_association.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>bitnami_edx.django_openid_auth_association.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>bitnami_edx.django_openid_auth_association.server_url</code>.
     */
    public void setServerUrl(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>bitnami_edx.django_openid_auth_association.server_url</code>.
     */
    public String getServerUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>bitnami_edx.django_openid_auth_association.handle</code>.
     */
    public void setHandle(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>bitnami_edx.django_openid_auth_association.handle</code>.
     */
    public String getHandle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>bitnami_edx.django_openid_auth_association.secret</code>.
     */
    public void setSecret(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>bitnami_edx.django_openid_auth_association.secret</code>.
     */
    public String getSecret() {
        return (String) get(3);
    }

    /**
     * Setter for <code>bitnami_edx.django_openid_auth_association.issued</code>.
     */
    public void setIssued(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>bitnami_edx.django_openid_auth_association.issued</code>.
     */
    public Integer getIssued() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>bitnami_edx.django_openid_auth_association.lifetime</code>.
     */
    public void setLifetime(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>bitnami_edx.django_openid_auth_association.lifetime</code>.
     */
    public Integer getLifetime() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>bitnami_edx.django_openid_auth_association.assoc_type</code>.
     */
    public void setAssocType(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>bitnami_edx.django_openid_auth_association.assoc_type</code>.
     */
    public String getAssocType() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, String, String, String, Integer, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, String, String, String, Integer, Integer, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION.SERVER_URL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION.HANDLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION.SECRET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION.ISSUED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION.LIFETIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION.ASSOC_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getServerUrl();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getHandle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getSecret();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getIssued();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getLifetime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getAssocType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord value2(String value) {
        setServerUrl(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord value3(String value) {
        setHandle(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord value4(String value) {
        setSecret(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord value5(Integer value) {
        setIssued(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord value6(Integer value) {
        setLifetime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord value7(String value) {
        setAssocType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoOpenidAuthAssociationRecord values(Integer value1, String value2, String value3, String value4, Integer value5, Integer value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DjangoOpenidAuthAssociationRecord
     */
    public DjangoOpenidAuthAssociationRecord() {
        super(DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION);
    }

    /**
     * Create a detached, initialised DjangoOpenidAuthAssociationRecord
     */
    public DjangoOpenidAuthAssociationRecord(Integer id, String serverUrl, String handle, String secret, Integer issued, Integer lifetime, String assocType) {
        super(DjangoOpenidAuthAssociation.DJANGO_OPENID_AUTH_ASSOCIATION);

        set(0, id);
        set(1, serverUrl);
        set(2, handle);
        set(3, secret);
        set(4, issued);
        set(5, lifetime);
        set(6, assocType);
    }
}

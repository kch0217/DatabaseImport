/**
 * This class is generated by jOOQ
 */
package schema.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;

import schema.tables.ProctoringProctoredexam;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProctoringProctoredexamRecord extends UpdatableRecordImpl<ProctoringProctoredexamRecord> implements Record12<Integer, Timestamp, Timestamp, String, String, String, String, Integer, Timestamp, Byte, Byte, Byte> {

    private static final long serialVersionUID = 1728635912;

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.created</code>.
     */
    public void setCreated(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.created</code>.
     */
    public Timestamp getCreated() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.modified</code>.
     */
    public void setModified(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.modified</code>.
     */
    public Timestamp getModified() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.course_id</code>.
     */
    public void setCourseId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.course_id</code>.
     */
    public String getCourseId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.content_id</code>.
     */
    public void setContentId(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.content_id</code>.
     */
    public String getContentId() {
        return (String) get(4);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.external_id</code>.
     */
    public void setExternalId(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.external_id</code>.
     */
    public String getExternalId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.exam_name</code>.
     */
    public void setExamName(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.exam_name</code>.
     */
    public String getExamName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.time_limit_mins</code>.
     */
    public void setTimeLimitMins(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.time_limit_mins</code>.
     */
    public Integer getTimeLimitMins() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.due_date</code>.
     */
    public void setDueDate(Timestamp value) {
        set(8, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.due_date</code>.
     */
    public Timestamp getDueDate() {
        return (Timestamp) get(8);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.is_proctored</code>.
     */
    public void setIsProctored(Byte value) {
        set(9, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.is_proctored</code>.
     */
    public Byte getIsProctored() {
        return (Byte) get(9);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.is_practice_exam</code>.
     */
    public void setIsPracticeExam(Byte value) {
        set(10, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.is_practice_exam</code>.
     */
    public Byte getIsPracticeExam() {
        return (Byte) get(10);
    }

    /**
     * Setter for <code>bitnami_edx.proctoring_proctoredexam.is_active</code>.
     */
    public void setIsActive(Byte value) {
        set(11, value);
    }

    /**
     * Getter for <code>bitnami_edx.proctoring_proctoredexam.is_active</code>.
     */
    public Byte getIsActive() {
        return (Byte) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<Integer, Timestamp, Timestamp, String, String, String, String, Integer, Timestamp, Byte, Byte, Byte> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<Integer, Timestamp, Timestamp, String, String, String, String, Integer, Timestamp, Byte, Byte, Byte> valuesRow() {
        return (Row12) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field2() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.CREATED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field3() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.MODIFIED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.COURSE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.CONTENT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.EXTERNAL_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.EXAM_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.TIME_LIMIT_MINS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field9() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.DUE_DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field10() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.IS_PROCTORED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field11() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.IS_PRACTICE_EXAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field12() {
        return ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM.IS_ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value2() {
        return getCreated();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value3() {
        return getModified();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getCourseId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getContentId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getExternalId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getExamName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getTimeLimitMins();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value9() {
        return getDueDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value10() {
        return getIsProctored();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value11() {
        return getIsPracticeExam();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value12() {
        return getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value2(Timestamp value) {
        setCreated(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value3(Timestamp value) {
        setModified(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value4(String value) {
        setCourseId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value5(String value) {
        setContentId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value6(String value) {
        setExternalId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value7(String value) {
        setExamName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value8(Integer value) {
        setTimeLimitMins(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value9(Timestamp value) {
        setDueDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value10(Byte value) {
        setIsProctored(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value11(Byte value) {
        setIsPracticeExam(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord value12(Byte value) {
        setIsActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProctoringProctoredexamRecord values(Integer value1, Timestamp value2, Timestamp value3, String value4, String value5, String value6, String value7, Integer value8, Timestamp value9, Byte value10, Byte value11, Byte value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProctoringProctoredexamRecord
     */
    public ProctoringProctoredexamRecord() {
        super(ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM);
    }

    /**
     * Create a detached, initialised ProctoringProctoredexamRecord
     */
    public ProctoringProctoredexamRecord(Integer id, Timestamp created, Timestamp modified, String courseId, String contentId, String externalId, String examName, Integer timeLimitMins, Timestamp dueDate, Byte isProctored, Byte isPracticeExam, Byte isActive) {
        super(ProctoringProctoredexam.PROCTORING_PROCTOREDEXAM);

        set(0, id);
        set(1, created);
        set(2, modified);
        set(3, courseId);
        set(4, contentId);
        set(5, externalId);
        set(6, examName);
        set(7, timeLimitMins);
        set(8, dueDate);
        set(9, isProctored);
        set(10, isPracticeExam);
        set(11, isActive);
    }
}

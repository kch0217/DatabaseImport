/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.MilestonesUsermilestoneRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MilestonesUsermilestone extends TableImpl<MilestonesUsermilestoneRecord> {

    private static final long serialVersionUID = 1862065535;

    /**
     * The reference instance of <code>bitnami_edx.milestones_usermilestone</code>
     */
    public static final MilestonesUsermilestone MILESTONES_USERMILESTONE = new MilestonesUsermilestone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MilestonesUsermilestoneRecord> getRecordType() {
        return MilestonesUsermilestoneRecord.class;
    }

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.id</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.created</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.modified</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, Timestamp> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.user_id</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.source</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.collected</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, Timestamp> COLLECTED = createField("collected", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.active</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, Byte> ACTIVE = createField("active", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.milestones_usermilestone.milestone_id</code>.
     */
    public final TableField<MilestonesUsermilestoneRecord, Integer> MILESTONE_ID = createField("milestone_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.milestones_usermilestone</code> table reference
     */
    public MilestonesUsermilestone() {
        this("milestones_usermilestone", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.milestones_usermilestone</code> table reference
     */
    public MilestonesUsermilestone(String alias) {
        this(alias, MILESTONES_USERMILESTONE);
    }

    private MilestonesUsermilestone(String alias, Table<MilestonesUsermilestoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private MilestonesUsermilestone(String alias, Table<MilestonesUsermilestoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MilestonesUsermilestoneRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MILESTONES_USERMILESTONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MilestonesUsermilestoneRecord> getPrimaryKey() {
        return Keys.KEY_MILESTONES_USERMILESTONE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MilestonesUsermilestoneRecord>> getKeys() {
        return Arrays.<UniqueKey<MilestonesUsermilestoneRecord>>asList(Keys.KEY_MILESTONES_USERMILESTONE_PRIMARY, Keys.KEY_MILESTONES_USERMILESTONE_MILESTONES_USERMILESTONE_USER_ID_10206AA452468351_UNIQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MilestonesUsermilestoneRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MilestonesUsermilestoneRecord, ?>>asList(Keys.MILESTO_MILESTONE_ID_4FE38E3E9994F15C_FK_MILESTONES_MILESTONE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MilestonesUsermilestone as(String alias) {
        return new MilestonesUsermilestone(alias, this);
    }

    /**
     * Rename this table
     */
    public MilestonesUsermilestone rename(String name) {
        return new MilestonesUsermilestone(name, null);
    }
}

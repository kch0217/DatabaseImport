/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.StudentUsersignupsourceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentUsersignupsource extends TableImpl<StudentUsersignupsourceRecord> {

    private static final long serialVersionUID = 1252922655;

    /**
     * The reference instance of <code>bitnami_edx.student_usersignupsource</code>
     */
    public static final StudentUsersignupsource STUDENT_USERSIGNUPSOURCE = new StudentUsersignupsource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentUsersignupsourceRecord> getRecordType() {
        return StudentUsersignupsourceRecord.class;
    }

    /**
     * The column <code>bitnami_edx.student_usersignupsource.id</code>.
     */
    public final TableField<StudentUsersignupsourceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.student_usersignupsource.site</code>.
     */
    public final TableField<StudentUsersignupsourceRecord, String> SITE = createField("site", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.student_usersignupsource.user_id</code>.
     */
    public final TableField<StudentUsersignupsourceRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.student_usersignupsource</code> table reference
     */
    public StudentUsersignupsource() {
        this("student_usersignupsource", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.student_usersignupsource</code> table reference
     */
    public StudentUsersignupsource(String alias) {
        this(alias, STUDENT_USERSIGNUPSOURCE);
    }

    private StudentUsersignupsource(String alias, Table<StudentUsersignupsourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentUsersignupsource(String alias, Table<StudentUsersignupsourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StudentUsersignupsourceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STUDENT_USERSIGNUPSOURCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StudentUsersignupsourceRecord> getPrimaryKey() {
        return Keys.KEY_STUDENT_USERSIGNUPSOURCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StudentUsersignupsourceRecord>> getKeys() {
        return Arrays.<UniqueKey<StudentUsersignupsourceRecord>>asList(Keys.KEY_STUDENT_USERSIGNUPSOURCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StudentUsersignupsourceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StudentUsersignupsourceRecord, ?>>asList(Keys.STUDENT_USERSIGNUPSOURC_USER_ID_4DB69FDECF32119F_FK_AUTH_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StudentUsersignupsource as(String alias) {
        return new StudentUsersignupsource(alias, this);
    }

    /**
     * Rename this table
     */
    public StudentUsersignupsource rename(String name) {
        return new StudentUsersignupsource(name, null);
    }
}

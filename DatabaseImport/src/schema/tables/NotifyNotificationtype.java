/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.NotifyNotificationtypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotifyNotificationtype extends TableImpl<NotifyNotificationtypeRecord> {

    private static final long serialVersionUID = -1238024580;

    /**
     * The reference instance of <code>bitnami_edx.notify_notificationtype</code>
     */
    public static final NotifyNotificationtype NOTIFY_NOTIFICATIONTYPE = new NotifyNotificationtype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotifyNotificationtypeRecord> getRecordType() {
        return NotifyNotificationtypeRecord.class;
    }

    /**
     * The column <code>bitnami_edx.notify_notificationtype.key</code>.
     */
    public final TableField<NotifyNotificationtypeRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.notify_notificationtype.label</code>.
     */
    public final TableField<NotifyNotificationtypeRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>bitnami_edx.notify_notificationtype.content_type_id</code>.
     */
    public final TableField<NotifyNotificationtypeRecord, Integer> CONTENT_TYPE_ID = createField("content_type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>bitnami_edx.notify_notificationtype</code> table reference
     */
    public NotifyNotificationtype() {
        this("notify_notificationtype", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.notify_notificationtype</code> table reference
     */
    public NotifyNotificationtype(String alias) {
        this(alias, NOTIFY_NOTIFICATIONTYPE);
    }

    private NotifyNotificationtype(String alias, Table<NotifyNotificationtypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private NotifyNotificationtype(String alias, Table<NotifyNotificationtypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NotifyNotificationtypeRecord> getPrimaryKey() {
        return Keys.KEY_NOTIFY_NOTIFICATIONTYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NotifyNotificationtypeRecord>> getKeys() {
        return Arrays.<UniqueKey<NotifyNotificationtypeRecord>>asList(Keys.KEY_NOTIFY_NOTIFICATIONTYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NotifyNotificationtypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotifyNotificationtypeRecord, ?>>asList(Keys.NOTIF_CONTENT_TYPE_ID_181F055892581FD8_FK_DJANGO_CONTENT_TYPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NotifyNotificationtype as(String alias) {
        return new NotifyNotificationtype(alias, this);
    }

    /**
     * Rename this table
     */
    public NotifyNotificationtype rename(String name) {
        return new NotifyNotificationtype(name, null);
    }
}

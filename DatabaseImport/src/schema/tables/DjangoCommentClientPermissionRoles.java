/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.DjangoCommentClientPermissionRolesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DjangoCommentClientPermissionRoles extends TableImpl<DjangoCommentClientPermissionRolesRecord> {

    private static final long serialVersionUID = -748309346;

    /**
     * The reference instance of <code>bitnami_edx.django_comment_client_permission_roles</code>
     */
    public static final DjangoCommentClientPermissionRoles DJANGO_COMMENT_CLIENT_PERMISSION_ROLES = new DjangoCommentClientPermissionRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DjangoCommentClientPermissionRolesRecord> getRecordType() {
        return DjangoCommentClientPermissionRolesRecord.class;
    }

    /**
     * The column <code>bitnami_edx.django_comment_client_permission_roles.id</code>.
     */
    public final TableField<DjangoCommentClientPermissionRolesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_comment_client_permission_roles.permission_id</code>.
     */
    public final TableField<DjangoCommentClientPermissionRolesRecord, String> PERMISSION_ID = createField("permission_id", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.django_comment_client_permission_roles.role_id</code>.
     */
    public final TableField<DjangoCommentClientPermissionRolesRecord, Integer> ROLE_ID = createField("role_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.django_comment_client_permission_roles</code> table reference
     */
    public DjangoCommentClientPermissionRoles() {
        this("django_comment_client_permission_roles", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.django_comment_client_permission_roles</code> table reference
     */
    public DjangoCommentClientPermissionRoles(String alias) {
        this(alias, DJANGO_COMMENT_CLIENT_PERMISSION_ROLES);
    }

    private DjangoCommentClientPermissionRoles(String alias, Table<DjangoCommentClientPermissionRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DjangoCommentClientPermissionRoles(String alias, Table<DjangoCommentClientPermissionRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DjangoCommentClientPermissionRolesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DJANGO_COMMENT_CLIENT_PERMISSION_ROLES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DjangoCommentClientPermissionRolesRecord> getPrimaryKey() {
        return Keys.KEY_DJANGO_COMMENT_CLIENT_PERMISSION_ROLES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DjangoCommentClientPermissionRolesRecord>> getKeys() {
        return Arrays.<UniqueKey<DjangoCommentClientPermissionRolesRecord>>asList(Keys.KEY_DJANGO_COMMENT_CLIENT_PERMISSION_ROLES_PRIMARY, Keys.KEY_DJANGO_COMMENT_CLIENT_PERMISSION_ROLES_PERMISSION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DjangoCommentClientPermissionRolesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DjangoCommentClientPermissionRolesRecord, ?>>asList(Keys.D4E9A4067C1DB9041491363F5E032121, Keys.DJANGO_ROLE_ID_558412C96EF7BA87_FK_DJANGO_COMMENT_CLIENT_ROLE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DjangoCommentClientPermissionRoles as(String alias) {
        return new DjangoCommentClientPermissionRoles(alias, this);
    }

    /**
     * Rename this table
     */
    public DjangoCommentClientPermissionRoles rename(String name) {
        return new DjangoCommentClientPermissionRoles(name, null);
    }
}

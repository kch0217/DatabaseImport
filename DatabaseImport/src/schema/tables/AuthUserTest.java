/**
 * This class is generated by jOOQ
 */
package schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import schema.BitnamiEdx;
import schema.Keys;
import schema.tables.records.AuthUserTestRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUserTest extends TableImpl<AuthUserTestRecord> {

    private static final long serialVersionUID = -1792782129;

    /**
     * The reference instance of <code>bitnami_edx.auth_user_test</code>
     */
    public static final AuthUserTest AUTH_USER_TEST = new AuthUserTest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthUserTestRecord> getRecordType() {
        return AuthUserTestRecord.class;
    }

    /**
     * The column <code>bitnami_edx.auth_user_test.id</code>.
     */
    public final TableField<AuthUserTestRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.password</code>.
     */
    public final TableField<AuthUserTestRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.last_login</code>.
     */
    public final TableField<AuthUserTestRecord, Timestamp> LAST_LOGIN = createField("last_login", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.is_superuser</code>.
     */
    public final TableField<AuthUserTestRecord, Byte> IS_SUPERUSER = createField("is_superuser", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.username</code>.
     */
    public final TableField<AuthUserTestRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.first_name</code>.
     */
    public final TableField<AuthUserTestRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.last_name</code>.
     */
    public final TableField<AuthUserTestRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR.length(30).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.email</code>.
     */
    public final TableField<AuthUserTestRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(254).nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.is_staff</code>.
     */
    public final TableField<AuthUserTestRecord, Byte> IS_STAFF = createField("is_staff", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.is_active</code>.
     */
    public final TableField<AuthUserTestRecord, Byte> IS_ACTIVE = createField("is_active", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>bitnami_edx.auth_user_test.date_joined</code>.
     */
    public final TableField<AuthUserTestRecord, Timestamp> DATE_JOINED = createField("date_joined", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>bitnami_edx.auth_user_test</code> table reference
     */
    public AuthUserTest() {
        this("auth_user_test", null);
    }

    /**
     * Create an aliased <code>bitnami_edx.auth_user_test</code> table reference
     */
    public AuthUserTest(String alias) {
        this(alias, AUTH_USER_TEST);
    }

    private AuthUserTest(String alias, Table<AuthUserTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthUserTest(String alias, Table<AuthUserTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return BitnamiEdx.BITNAMI_EDX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuthUserTestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUTH_USER_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthUserTestRecord> getPrimaryKey() {
        return Keys.KEY_AUTH_USER_TEST_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthUserTestRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthUserTestRecord>>asList(Keys.KEY_AUTH_USER_TEST_PRIMARY, Keys.KEY_AUTH_USER_TEST_USERNAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthUserTest as(String alias) {
        return new AuthUserTest(alias, this);
    }

    /**
     * Rename this table
     */
    public AuthUserTest rename(String name) {
        return new AuthUserTest(name, null);
    }
}
